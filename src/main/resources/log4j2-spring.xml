<?xml version="1.0" encoding="UTF-8"?>
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：含义是每隔多少秒重新读取配置文件，可以不重启应用的情况下修改配置-->
<configuration monitorInterval="5">
    <!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
    <!--变量配置-->
    <Properties>
        <!-- 格式化输出：%date表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度 %msg：日志消息，%n是换行符-->
        <!-- %logger{36} 表示 Logger 名字最长36个字符 -->
        <!--<property name="LOG_PATTERN" value="%date{HH:mm:ss.SSS} [%thread] %-5level %logger{%line} - %msg%n" />-->
        <Property name="LOG_PATTERN">%clr{%d{MM-dd HH:mm:ss.SSS}}{faint} %clr{%5p} %clr{---}{faint} %clr{[%t]}{faint}
            %clr{%logger}{cyan} [%line] %clr{:}{faint} %m%n%xwEx
        </Property>
        <!-- 定义日志存储的路径 -->
        <!--<property name="FILE_PATH" value="更换为你的日志路径" />
        <property name="FILE_NAME" value="更换为你的项目名" />-->
    </Properties>

    <appenders>
        <!--Console：控制台输出源是将日志打印到控制台上，开发的时候一般都会配置，以便调试-->
        <console name="Console" target="SYSTEM_OUT">
            <!--输出日志的格式-->
            <PatternLayout pattern="${LOG_PATTERN}"/>
            <!--
            onMatch="ACCEPT"匹配该级别及以上级别;
            onMatch="DENY"不匹配该级别及以上级别;
            onMismatch="ACCEPT" 表示匹配该级别以下的级别;
            onMismatch="DENY" 表示不匹配该级别以下的级别;
            -->
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
        </console>
        <!--fileName 指定当前日志文件的位置和文件名称
        filePattern 指定当发生Rolling时，文件的转移和重命名规则
        SizeBasedTriggeringPolicy 指定当文件体积大于size指定的值时，触发Rolling
        DefaultRolloverStrategy 指定最多保存的文件个数
        TimeBasedTriggeringPolicy 这个配置需要和filePattern结合使用，注意filePattern中配置的文件重命名规则是${FILE_NAME}-%d{yyyy-MM-dd HH-mm}-%i，最小的时间粒度是mm，即分钟
        TimeBasedTriggeringPolicy指定的size是1，结合起来就是每1分钟生成一个新文件。如果改成%d{yyyy-MM-dd HH}，最小粒度为小时，则每一个小时生成一个文件-->
        <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <!--
                <RollingRandomAccessFile name="RollingFileInfo" fileName="${FILE_PATH}/info.log" filePattern="${FILE_PATH}/${FILE_NAME}-INFO-%d{yyyy-MM-dd}_%i.log.gz">
                    &lt;!&ndash;控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）&ndash;&gt;
                    <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
                    <PatternLayout pattern="${LOG_PATTERN}"/>
                    <Policies>
                        <TimeBasedTriggeringPolicy interval="1"/>
                        <SizeBasedTriggeringPolicy size="10MB"/>
                    </Policies>
                    <DefaultRolloverStrategy max="15"/>
                </RollingRandomAccessFile>
        -->
    </appenders>
    <Loggers>
        <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
        <logger name="org" level="ERROR" additivity="false">
            <AppenderRef ref="Console"/>
        </logger>
        <logger name="com.zaxxer" level="ERROR" additivity="false">
            <AppenderRef ref="Console"/>
        </logger>
        <logger name="io" level="ERROR" additivity="false">
            <AppenderRef ref="Console"/>
        </logger>

        <Logger name="infoLogger" level="info" additivity="false">
            <AppenderRef ref="Console"/>
        </Logger>

        <Root level="debug">
            <AppenderRef ref="Console"/>
        </Root>
    </Loggers>
    <!--Logger节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。-->
    <!--然后定义loggers，只有定义了logger并引入的appender，appender才会生效-->
    <!--<loggers>
        若是additivity设为false，则 子Logger 只会在自己的appender里输出，而不会在 父Logger 的appender里输出。&ndash;&gt;
        <Logger name="org.springframework" level="info" additivity="false">
            <AppenderRef ref="Console"/>
        </Logger>
        <root level="info">
            <appender-ref ref="Console"/>
            <appender-ref ref="Filelog"/>
            <appender-ref ref="RollingFileInfo"/>
            <appender-ref ref="RollingFileWarn"/>
            <appender-ref ref="RollingFileError"/>
        </root>
    </loggers>-->

</configuration>
