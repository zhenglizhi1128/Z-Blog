<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.zhenglz.mapper.UserMapper">
    <resultMap id="BaseResultMap" type="com.zhenglz.entity.User">
        <!--@Table m_user-->
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="username" jdbcType="VARCHAR" property="username"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="nickname" jdbcType="VARCHAR" property="nickname"/>
        <result column="phone" jdbcType="VARCHAR" property="phone"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
        <result column="birthday" jdbcType="DATE" property="birthday"/>
        <result column="sex" jdbcType="INTEGER" property="sex"/>
        <result column="status" jdbcType="INTEGER" property="status"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="update_time" jdbcType="TIMESTAMP" property="updateTime"/>
    </resultMap>

    <sql id="Base_Column_List">
        id,
        username,
        `password`,
        nickname,
        phone,
        email,
        birthday,
        sex,
        `status`,
        create_time,
        update_time
    </sql>

    <select id="getUserById" parameterType="java.lang.Long" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from m_user
        where id = #{id,jdbcType=BIGINT}
    </select>

    <delete id="deleteById" parameterType="java.lang.Long">
        delete from m_user
        where id = #{id,jdbcType=BIGINT}
    </delete>

    <insert id="insert" parameterType="com.zhenglz.entity.User" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
        insert into m_user (username, `password`,
        nickname, phone, email,
        birthday, sex, `status`,
        create_time, update_time)
        values (#{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
        #{nickname,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR},
        #{birthday,jdbcType=DATE}, #{sex,jdbcType=INTEGER}, #{status,jdbcType=INTEGER},
        #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP})
    </insert>

    <update id="updatePrimaryById" parameterType="com.zhenglz.entity.User">
        update m_user
        <set>
            <if test="username != null">
                username = #{username,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                `password` = #{password,jdbcType=VARCHAR},
            </if>
            <if test="nickname != null">
                nickname = #{nickname,jdbcType=VARCHAR},
            </if>
            <if test="phone != null">
                phone = #{phone,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                email = #{email,jdbcType=VARCHAR},
            </if>
            <if test="birthday != null">
                birthday = #{birthday,jdbcType=DATE},
            </if>
            <if test="sex != null">
                sex = #{sex,jdbcType=INTEGER},
            </if>
            <if test="status != null">
                `status` = #{status,jdbcType=INTEGER},
            </if>
            <if test="createTime != null">
                create_time = #{createTime,jdbcType=TIMESTAMP},
            </if>
            <if test="updateTime != null">
                update_time = #{updateTime,jdbcType=TIMESTAMP},
            </if>
        </set>
        where id = #{id,jdbcType=BIGINT}
    </update>

    <update id="updateById" parameterType="com.zhenglz.entity.User">
        update m_user
        set username = #{username,jdbcType=VARCHAR},
        `password` = #{password,jdbcType=VARCHAR},
        nickname = #{nickname,jdbcType=VARCHAR},
        phone = #{phone,jdbcType=VARCHAR},
        email = #{email,jdbcType=VARCHAR},
        birthday = #{birthday,jdbcType=DATE},
        sex = #{sex,jdbcType=INTEGER},
        `status` = #{status,jdbcType=INTEGER},
        create_time = #{createTime,jdbcType=TIMESTAMP},
        update_time = #{updateTime,jdbcType=TIMESTAMP}
        where id = #{id,jdbcType=BIGINT}
    </update>

    <select id="listUsers" resultType="com.zhenglz.entity.User">
        select *
        from m_user
    </select>

    <select id="findByUsernameOrEmailOrPhone" resultType="com.zhenglz.entity.User">
        select *
        from m_user
        where username = #{username}
        or email = #{email} or phone = #{phone}
    </select>

    <select id="countUser" resultType="java.lang.Integer">
        select count(1)
        from m_user
        where status = 1
    </select>

    <select id="listUsersForSet" resultMap="listUsersForSetResultMap">
        <bind name="pattern_userNameOrPhone" value="'%' + userNameOrPhone + '%'" />
        SELECT t1.id,
        t1.username,
        t1.nickname,
        t1.phone,
        t1.create_time,
        t1.status,
        t3.id as roleId,
        t3.name as roleName
        FROM m_user as t1,m_user_role as t2,m_role as t3
        where t1.id=t2.user_id and t3.id=t2.role_id
        <if test="status != null">
            and t1.status = #{status,jdbcType=BOOLEAN}
        </if>
        <if test="roleId != null">
            and t3.id = #{roleId,jdbcType=BIGINT}
        </if>
        <if test="userNameOrPhone != null and userNameOrPhone != ''">
            and username like #{pattern_userNameOrPhone} or phone like #{pattern_userNameOrPhone}
        </if>
        ORDER BY t1.id
    </select>

    <resultMap id="listUsersForSetResultMap" type="com.zhenglz.vo.UserVo">
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="nickname" property="nickname"/>
        <result column="phone" property="phone"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="status" jdbcType="BOOLEAN" property="status"/>
        <collection property="roles" ofType="com.zhenglz.entity.Role">
            <id column="roleId" property="id"/>
            <result column="roleName" property="name"/>
        </collection>
    </resultMap>

    <select id="listUsersByNames" parameterType="list" resultType="com.zhenglz.entity.User">
        select id,username,nickname,phone FROM m_user
        <foreach collection="userNames" open="where username in(" close=")" separator="," item="item">
            #{item}
        </foreach>
    </select>

</mapper>

